name: facam backend Workflow

on:
  push:
    branches:
      - main
    # paths:
    #   - 'facam-backend/**'
  # workflow_dispatch: # production
  #   inputs:
  #     logLevel:
  #       description: 'Log level'
  #       required: true
  #       default: 'warning'
  #     tags:
  #       description: 'Test scenario tags'

env:
  LOCAL_PATH: facam-backend

jobs:
  mvn-build:
    name: mvn-build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file ./${{ env.LOCAL_PATH }}/pom.xml

  # aws-credentials:
  #   name: aws-credentials
  #   runs-on: ubuntu-latest
  #   environment: development

  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with: 
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  ecr-build-push:
    name: ecr-build-push
    runs-on: ubuntu-latest
    needs: mvn-build
    environment: development

    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
      ecr_backend_image: ${{ env.ECR_BACKEND_IMAGE }}
      image_version: ${{ steps.set-version.outputs.version }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # - name: Calculate image next version
      #   id: version
      #   run: |
      #     TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
      #     MAJOR=$(echo $TAG | cut -d. -f1)
      #     MINOR=$(echo $TAG | cut -d. -f2)
      #     PATCH=$(echo $TAG | cut -d. -f3)
      #     PATCH=$((PATCH+1))
      #     NEW_TAG="$MAJOR.$MINOR.$PATCH"
      #     echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
      #     echo "::set-output name=new_tag::$NEW_TAG"

      - name: Build and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_BACKEND_IMAGE: ${{ secrets.ECR_BACKEND_IMAGE }}
        run: | # VERSION=${{ steps.version.outputs.new_tag }}
          docker build -f ./${{ env.LOCAL_PATH }}/Dockerfile -t $ECR_REGISTRY/$ECR_BACKEND_IMAGE:latest .
          docker push $ECR_REGISTRY/$ECR_BACKEND_IMAGE:latest
  
  ecs-deploy:
    name: ecs-deploy
    runs-on: ubuntu-latest
    needs: ecr-build-push
    environment: development

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Checkout IMAGE information
        run: |
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          ECR_BACKEND_IMAGE="${{ secrets.ECR_BACKEND_IMAGE }}"
          echo $ECR_REGISTRY/$ECR_BACKEND_IMAGE:latest

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy AWS ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true